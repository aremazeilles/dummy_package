/**
* @file dummy_node_common.cpp
* @author Anthony Remazeilles
*
* Copyright (C) Tecnalia
*
* @brief Dummy node implementation
*        This file is to be edited by the Developer
**/

// ROS message includes
#include "ros/ros.h"

// ROS message & services includes

#include <actionlib/server/simple_action_server.h>
#include <actionlib/TestAction.h>
#include <dynamic_reconfigure/server.h>
#include <dummy_package/dummy_nodeConfig.h>

// ROS message & services includes
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float32.h>
#include <std_msgs/String.h>
#include <std_srvs/SetBool.h>

#include <tf/transform_broadcaster.h>

/* protected region user include files begin */
/* protected region user include files end */

/**
 * @class DummyNodeConfig
 * @brief set of static and dynamic parameters
 * @warning this class is autogenerated. It should not be touched!
 */
class DummyNodeConfig
{
public:
    // parameters handled through the parameter server
    std::string my_static_param;
    // dynamic parameters handled through dynamic reconfigure
    std::string my_dyn_param;
    //! overloading the print operator
    friend std::ostream& operator<< (std::ostream& os,
                                     const DummyNodeConfig& config)
    {
        os << "my_static_param: " << config.my_static_param << std::endl;
        os << "my_dyn_param: " << config.my_dyn_param << std::endl;
        return os;
    }
};

/**
 * @class DummyNodeData
 * @brief set of input / output handled through the update methods
 * @warning this class is autogenerated. It should not be touched!
 */
class DummyNodeData
{
public:
    // input data
    std_msgs::Float32 in_my_sub;
    bool in_my_sub_updated;
    // output data
    std_msgs::Bool out_my_pub;
    bool out_my_pub_active;
};

/**
 * @class DummyNodePassthrough
 * @brief set of passthrough elements slightly violating interface / implementation separation
 * @warning this class is autogenerated. It should not be touched!
 */
class DummyNodePassthrough
{
public:
    tf::TransformBroadcaster broadcast;
    ros::Publisher my_direct_pub;
    ros::Subscriber my_direct_sub;


    /**
     * @brief constructor
     */
    DummyNodePassthrough()
    {
    }
    /**
     * @brief destructor
     */
    ~DummyNodePassthrough()
    {
    }
};
/**
 * @class DummyNodeImpl
 * @brief Implementation of the node intelligence
 * @warning this class is be filled by the Developer, at locations indicated
 */
class DummyNodeImpl
{
    /* protected region user member variables begin */
    /* protected region user member variables end */

public:
    DummyNodePassthrough passthrough;

    /**
     * @brief constructor
     */
    DummyNodeImpl()
    {
        /* protected region user constructor begin */
        /* protected region user constructor end */
    }
    /**
     * @brief destructor
     */
    ~DummyNodeImpl()
    {
        /* protected region user destructor begin */
        /* protected region user destructor end */
    }
    /**
     * @brief method called at node configuration
     * @param config set of configuration parameters available
     */
    void configure(DummyNodeConfig config)
    {
        /* protected region user configure begin */
        /* protected region user configure end */
    }
    /**
     * @brief Update method periodically called by the ros component
     * @param data contains received messages (through subscription), and will contain messages to publish
     * @param config latest state of the config variables
     */
    void update(DummyNodeData &data, DummyNodeConfig config)
    {
        /* protected region user update begin */
        /* protected region user update end */
    }

    /**
     * @brief callback of an action request
     * @param goal objective provided by the caller
     * @param as_ handler of the action
     */
    void callback_my_action(const actionlib::TestGoalConstPtr &goal, actionlib::SimpleActionServer<actionlib::TestAction> *as_)
    {
        /* protected region user implementation of action callback for my_action begin */
        /* protected region user implementation of action callback for my_action end */
    }
    /**
     * @brief callback of a service request
     * @param req input parameters provided by the caller
     * @param res output parameters resulting from the service execution
     * @param config latest state of the config variables
     */
    bool callback_my_service(std_srvs::SetBool::Request  &req, std_srvs::SetBool::Response &res , DummyNodeConfig * config)
    {
        /* protected region user implementation of service callback for my_service begin */
        /* protected region user implementation of service callback for my_service end */
        // todo remove that return
        return true;
    }
    /**
     * @brief direct callback of a topic subscription
     * @param msg message received on the topic
     * @warning this subscription is not driven through the update mechanism
     */
    void directTopicCallback_my_direct_sub(const std_msgs::String::ConstPtr& msg)
    {
        /* protected region user implementation of direct subscriber callback for my_direct_sub begin */
        /* protected region user implementation of direct subscriber callback for my_direct_sub end */
    }
    /* protected region user additional functions begin */
    /* protected region user additional functions end */
};
